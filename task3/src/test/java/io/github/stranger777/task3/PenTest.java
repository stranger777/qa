package io.github.stranger777.task3;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.runners.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import static org.junit.jupiter.api.Assertions.*;

@RunWith(Parameterized.class)
class PenTest {
     static final String PEN_DEFAULT_COLOR = "BLUE";
    static final String PEN_RED_COLOR = "RED";
    static final int PEN_DEFAULT_INK = 1000;
     static final double PEN_DEFAULT_SIZE_LETTER = 1.0;
     static final int PEN_EMPTY = 0;
     static final boolean PEN_IS_NOT_WORK = false;
     static final int PEN_NON_EMPTY = 1;
     static final boolean PEN_IS_WORK = true;

    Pen defaultPen = null;
//    Pen inkSizeLetter = null;
//    Pen inkSizeLetterColor = null;

    static final String WRITED_WORD = "WORD";
    static final int INK_FOR_FULL_WORD = 4;
    static final int INK_FOR_PARTIAL_WORD = 1;
    static final String PARTIAL_WORD = "W";


    static final String CSV_SEPARATOR = ",";
    static final String CSV_EMPTY_STRING = "\'\'";


    @BeforeEach
    void setUp() {
        defaultPen = new Pen(PEN_DEFAULT_INK);
//        inkSizeLetter = new Pen(PEN_DEFAULT_INK, PEN_DEFAULT_SIZE_LETTER);
//        inkSizeLetterColor = new Pen(PEN_DEFAULT_INK, PEN_DEFAULT_SIZE_LETTER, PEN_DEFAULT_COLOR);
    }

    @AfterEach
    void tearDown() {
        defaultPen = null;
        // inkSizeLetter = null;
// inkSizeLetterColor = null;

    }

    @ParameterizedTest@CsvSource({
            INK_FOR_FULL_WORD + CSV_SEPARATOR + WRITED_WORD,
            INK_FOR_PARTIAL_WORD + CSV_SEPARATOR + PARTIAL_WORD,
            PEN_EMPTY + CSV_SEPARATOR + CSV_EMPTY_STRING
    })
    void testWriteWord(int ink, String expected) {
        String actual = new Pen(ink).write(WRITED_WORD);
        assertEquals(expected, actual);
    }

    @ParameterizedTest@CsvSource({PEN_DEFAULT_COLOR})
    void testGetColor(String expected) {
        String actual = defaultPen.getColor();
        assertEquals(expected, actual);
    }

    @ParameterizedTest@CsvSource({ PEN_RED_COLOR })
    void testColoringPen_getColor(String color){
        Pen coloringPen = new Pen( PEN_DEFAULT_INK, PEN_DEFAULT_SIZE_LETTER, color );
        assertEquals(color, coloringPen.getColor());
    }

    @ParameterizedTest@CsvSource({
            PEN_NON_EMPTY + CSV_SEPARATOR + PEN_IS_WORK,
            PEN_EMPTY + CSV_SEPARATOR + PEN_IS_NOT_WORK
    })
    void testIsWork(int ink, boolean expected) {
        boolean actual = new Pen(ink).isWork();
        assertEquals(expected, actual);
    }

    @ParameterizedTest@CsvSource({PEN_DEFAULT_COLOR})
    void testDoSomethingElse(String expected) throws IOException {
        //Prepare
        PrintStream old = System.out;
        Path tempFile = Files.createTempFile("file", "temp");
        try(PrintStream ps = new PrintStream(tempFile.toFile(), "UTF-8" )){
            System.setOut(ps);
            //Action
            defaultPen.doSomethingElse();
            //Actual
            String actual = Files.readAllLines(tempFile).get(0);
            //Assert
            assertEquals(expected, actual);
        }

        //Cleanup
        Files.deleteIfExists(tempFile.toRealPath());
        System.setOut(old);
    }
}